{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","href","title","placeholder","toggleMode","htmlFor","Textform","text","setText","background","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","aboutText","App","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0e27a556.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const[myStyle, setMyStyle  ] = useState({\r\n    \r\n    \r\n\r\n            color: 'black',\r\n            backgroundColor: 'white'\r\n    })\r\n\r\n    const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n     const  toggleStyle = ()=>{\r\n        if(myStyle.color === 'white'){\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor: 'white',\r\n                \r\n            })\r\n            setBtnText(\"Enable Dark Mode \")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n        })\r\n        setBtnText(\"Enable Light Mode \")\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container \"style={myStyle}>\r\n                                <h2 className= 'my-3' >About Us</h2>\r\n                            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button \"style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div >\r\n                <div className= \"container my-3\">\r\n                 <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary \">{btntext}</button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n      <nav className= {`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}> \r\n            <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li> */}\r\n             \r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              <input className=\"form-control me-4\" type=\"search\" placeholder=\"Search \" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-primary \" type=\"submit\">Search</button>\r\n            </form>\r\n            <div className={`form-check form-switch text-${props.mode===`light`?`dark`:`light`} `}>\r\n  <input className=\"form-check-input \" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {title : PropTypes.string,\r\n                        aboutText : PropTypes.string}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText : 'About Text Here'\r\n};","import React, {useState} from 'react'\r\nexport default function Textform(props) {\r\n    const handleUpClick = ()=>{\r\n        console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n\r\n    }\r\n    const handleLoClick = ()=>{\r\n        console.log(\"Lowercase was clicked\" + text);\r\n        let newText = text.toLocaleLowerCase();\r\n        setText(newText)\r\n\r\n    }\r\n    const handleClearClick = ()=>{\r\n        console.log(\"Clear Text was clicked\" + text);\r\n        let newText = '';\r\n        setText(newText)\r\n\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"On change!\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy=()=>{\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n\r\n\r\n    }\r\n    const [text, setText] = useState(' ');\r\n    return (\r\n    <>\r\n    <div className= \"container\" style={{background: props.mode===`light`?`white `:`#3973dc`}}>\r\n        <h1>{props.heading} </h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{background: props.mode===`dark`?`grey`:`white`}} id=\"mybox\" rows=\"8\"></textarea>\r\n    </div>\r\n\r\n    <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n    <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lower Case</button>\r\n    <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n    <button className=\"btn btn-primary mx-2\" onClick={handleCopy}> Copy Text</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{background: props.mode===`light`?`white `:`#3973dc`}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} character</p>\r\n            <p>{0.008* text.split(\" \").length}   Minutes Required to read    </p>\r\n            <h2> Preview </h2>\r\n            <p> {text.length>0?text:\"Enter something to preview it\"}   </p>\r\n    </div>\r\n        \r\n    </>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = ()=>{\n    if(mode ==='light'){\n    setMode('dark');\n    document.body.style.backgroundColor='#112d57'\n  }\n  else{\n    setMode('light');\n    document.body.style.backgroundColor='white'\n\n  }\n}\n  return ( \n  <>\n  {/* <Router> */}\n  <Navbar title=\"TextUtils\" mode={mode}  toggleMode={toggleMode}  />\n  <div className= \"container my-3\">\n    \n  {/* <Switch>\n          <Route exact path=\"/about\"> */}\n          {/* </Route>\n         \n        <Route  exact path=\"/\"> */}\n            {/* </Route>\n        </Switch> */}\n        <Textform heading= \"Enter the Text to analyze!\" mode={mode}/>\n        <About />\n  </div>\n  {/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}